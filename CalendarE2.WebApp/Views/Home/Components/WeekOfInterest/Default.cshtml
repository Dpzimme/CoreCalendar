@model CalendarE2.Domain.ViewModels.PeriodViewModel
@using  CalendarE2.Domain.ViewModels
    <script src="~/js/addUpdateEventBase.js"></script>

    <div id="periodEvents">
        <div class="row">
            <div class="col-md-3 topDate"><span>Week Starting @Model.Yr.ToString() , @Model.MoStr @Model.Day</span></div>
        </div>
        @await Component.InvokeAsync("AddUpdateModal")
        <div class="calGrid">
            <div class="gridItem gridheadercolor">--</div>
            @foreach (string colHdr in Model.Schedule.DateHeaders)
            {
                <div class="gridItem gridheadercolor">@colHdr</div>
            }
            @foreach (RowWithHour rwh in Model.Schedule.RowsOfHour)
            {
                <div class="gridItem gridtimecolor">@rwh.DisplayHour @rwh.AMPM</div>
                @for (int i = 0; i < rwh.EventsOfHour.Count(); i++)
                {
                    <div class="gridItem griditemcolor">
                        <div class="actionField" onclick='aUEventWeek(this)' data-datet="@rwh.EventsOfHour[i].DateT" data-hour="@rwh.EventsOfHour[i].HourInt"><span class="fa fa-edit">@rwh.EventsOfHour[i].Title</span></div>
                        <div>@rwh.EventsOfHour[i].Description</div>
                    </div>
                }
            }
        </div>
    </div>

    <script>      

        function checkUpdateWeek(elem) {
            if (elem.firstChild.innerText.length > 2) {
                document.getElementById("modalEventTitle").value = elem.firstChild.innerText;
                document.getElementById("modalDescription").value = elem.parentNode.children[1].innerHTML;
            }
        }

        function aUEventWeek(elem) {
            aUEvent(elem, packForm, checkUpdateWeek);
        }
        @*function aUEvent(elem) {
            // sets up / shows modal for add / update
            //let dateStr = elem.getAttribute("data-datet");
            let hour = elem.getAttribute("data-hour");
            let hourNumb = parseInt(hour, 10);
            //firstClickFlag = true;
           // fill out form above so we can communicate with the backend with either a create or update
            //console.log("elem.getAttribute(data-dateT) " + elem.getAttribute('data-datet').substr(0, 13));
            let datePieces = elem.getAttribute('data-datet').substr(0, 13).split("/");
            document.getElementById("modalMo").value = datePieces[0];
            document.getElementById("modalDy").value = datePieces[1];
            document.getElementById("modalYr").value = datePieces[2];
             document.getElementById("modalTimeFrame").value = @Model.TimeFrame;

            // check to see if desired date is in the past. If so, put up a modal indicating no change possible.
            let subjectMo = datePieces[0] - 1;
            let subjectDate = new Date(datePieces[2], subjectMo, datePieces[1], hourNumb);
            let currDate = new Date();
            if (subjectDate > currDate) {
                // get hour from the click event to send with form submission
                document.getElementById("modalHr").value = hourNumb;
                if (hourNumb > 12)
                { displayHr = hourNumb - 12; }
                else
                { displayHr = hourNumb; }
                // adjust for update mode, fill form with current values, change modal title and submit button
                if (elem.firstChild.innerText.length > 2) {
                    document.getElementById("modalEventTitle").value = elem.firstChild.innerText;
                    document.getElementById("modalDescription").value = elem.parentNode.children[1].innerHTML;
                }
                // show the Add or Updated modal based on whether the model has an event for the timeslot
                $("#aUModal").modal('show');
            }
            else {
                $("#pastEventMessage").modal('show');
            }
        };*@

    </script>    