@model CalendarE2.Domain.ViewModels.PeriodViewModel
@using  CalendarE2.Domain.ViewModels
    <script src="~/js/addUpdateEventBase.js"></script>

    <div id="periodEvents">
        <div class="row">
            <div class="col-md-3 topDate"><span>Week Starting @Model.Yr.ToString() , @Model.MoStr @Model.Day</span></div>
        </div>
        @await Component.InvokeAsync("AddUpdateModal")
        <div class="weekGrid">
            <div class="weekGridItem">--</div>
            @foreach (string colHdr in Model.Schedule.DateHeaders)
            {
                <div class="weekGridItem gridheadercolor">@colHdr</div>
            }
            @foreach (RowWithHour rwh in Model.Schedule.RowsOfHour)
            {
                <div class="weekGridItem gridtimecolor">@rwh.DisplayHour @rwh.AMPM</div>
                @for (int i = 0; i < rwh.EventsOfHour.Count(); i++)
                {
                    <div class="weekGridItem griditemcolor">
                        <div class="actionField" onclick='aUEventWeek(this)' data-datet="@rwh.EventsOfHour[i].DateT" data-hour="@rwh.EventsOfHour[i].HourInt"><span class="fa fa-edit titleEmphasis">@rwh.EventsOfHour[i].Title</span></div>
                        <div>@rwh.EventsOfHour[i].Description</div>
                    </div>
                }
            }
        </div>
    </div>

    <script>     
        function checkUpdateWeek(elem) {
            if (elem.firstChild.innerText.length > 2) {
                document.getElementById("modalEventTitle").value = elem.firstChild.innerText;
                document.getElementById("modalDescription").value = elem.parentNode.children[1].innerHTML;
            }
        }
         // The Week version of launching the Add or Update Modal. There is a Day version in the Day View Component and, you could imagine,
            // a Monthly version. In other words, there is a generic function, aUEvent, that takes a specific case function called checkUpdate<day or week>
            // to run the Add or Update Modal. Checking is confined to the specific time period. This is an example of the Strategy Design Pattern.    
        function aUEventWeek(elem) {
            aUEvent(elem, packForm, checkUpdateWeek);
        }     
    </script>    